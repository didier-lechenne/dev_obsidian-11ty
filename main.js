/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => Obsidian11tyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// src/utils/constants.ts
var CSS_VAR_MAPPING = {
  col: "--col",
  printCol: "--print-col",
  width: "--width",
  printWidth: "--print-width",
  printRow: "--print-row",
  printHeight: "--print-height",
  alignSelf: "--align-self",
  alignself: "--align-self",
  "align-self": "--align-self",
  imgX: "--img-x",
  imgY: "--img-y",
  imgW: "--img-w",
  page: "--pagedjs-full-page"
};
var SHORTCODE_REGEX = /\{%\s*(\w+)\s+([^%]+)\s*%\}/g;
var SUPPORTED_SHORTCODE_TYPES = [
  "image",
  "grid",
  "video",
  "figure",
  "imagenote",
  "fullpage"
];

// src/utils/helpers.ts
function generateStyles(config) {
  const styles = {};
  Object.entries(config).forEach(([key, value]) => {
    if (CSS_VAR_MAPPING[key] && value !== void 0 && value !== null && value !== "") {
      const cleanValue = typeof value === "string" ? value.replace(/^["']|["']$/g, "") : value;
      styles[CSS_VAR_MAPPING[key]] = cleanValue;
    }
  });
  return styles;
}
function applyStyles(element, config) {
  const styles = generateStyles(config);
  Object.entries(styles).forEach(([property, value]) => {
    element.style.setProperty(property, value);
  });
}
function cleanAlt(caption) {
  if (!caption) return "";
  return caption.replace(/\*([^*]+)\*/g, "$1").replace(/<[^>]+>/g, " ").replace(/&[^;]+;/g, " ").replace(/\s+/g, " ").trim();
}
function renderMarkdown(text) {
  return text.replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>").replace(/\*(.*?)\*/g, "<em>$1</em>").replace(/`(.*?)`/g, "<code>$1</code>");
}
function parseShortcodeParams(params) {
  params = params.trim();
  const match = params.match(/^["']([^"']+)["'](?:\s*,\s*(\{.*\}))?$/);
  if (!match) {
    throw new Error("Format de param\xE8tres invalide");
  }
  const src = match[1];
  let options = {};
  if (match[2]) {
    try {
      const cleanOptions = match[2].replace(/,(\s*[}\]])/g, "$1");
      options = Function(`"use strict"; return (${cleanOptions})`)();
    } catch (e) {
      console.warn("Erreur parsing options:", e);
      options = {};
    }
  }
  return { src, options };
}

// src/utils/shortcode-renderer.ts
var ShortcodeRenderer = class {
  constructor(app) {
    this.app = app;
    this.globalElementCounter = 0;
  }
  render(type, params) {
    if (!SUPPORTED_SHORTCODE_TYPES.includes(type)) {
      console.warn(`Type de shortcode non support\xE9: ${type}`);
      return null;
    }
    const { src, options = {} } = params;
    const config = { src: this.resolveImagePath(src), ...options };
    switch (type) {
      case "image":
        return this.createImageElement(config);
      case "grid":
        return this.createGridElement(config);
      case "video":
        return this.createVideoElement(config);
      case "figure":
        return this.createFigureElement(config);
      case "imagenote":
        return this.createImageNoteElement(config);
      case "fullpage":
        return this.createFullPageElement(config);
      default:
        return null;
    }
  }
  resolveImagePath(src) {
    if (!src) return "";
    if (src.startsWith("http") || src.startsWith("app://")) {
      return src;
    }
    const file = this.app.metadataCache.getFirstLinkpathDest(src, "");
    if (file) {
      return this.app.vault.getResourcePath(file);
    }
    return `app://local/${encodeURIComponent(src)}`;
  }
  createImageElement(config) {
    this.globalElementCounter++;
    const figure = document.createElement("figure");
    figure.setAttribute("data-id", config.id || "");
    figure.setAttribute("data-src", config.src || "");
    figure.setAttribute("data-grid", "image");
    figure.id = `image-${this.globalElementCounter}`;
    figure.className = `figure image${config.class ? " " + config.class : ""}`;
    const img = document.createElement("img");
    img.src = config.src || "";
    img.alt = cleanAlt(config.caption || "");
    figure.appendChild(img);
    if (config.caption) {
      const figcaption = document.createElement("figcaption");
      figcaption.className = "figcaption";
      figcaption.innerHTML = renderMarkdown(config.caption);
      figure.appendChild(figcaption);
    }
    applyStyles(figure, config);
    return figure;
  }
  createGridElement(config) {
    this.globalElementCounter++;
    const figure = document.createElement("figure");
    figure.setAttribute("data-id", config.id || "");
    figure.setAttribute("data-src", config.src || "");
    figure.setAttribute("data-grid", "image");
    figure.id = `figure-${this.globalElementCounter}`;
    figure.className = config.class || "";
    const img = document.createElement("img");
    img.src = config.src || "";
    img.alt = cleanAlt(config.caption || "");
    figure.appendChild(img);
    applyStyles(figure, config);
    if (config.caption) {
      const figcaption = document.createElement("figcaption");
      figcaption.className = `figcaption figcaption-${this.globalElementCounter}`;
      figcaption.innerHTML = renderMarkdown(config.caption);
      applyStyles(figcaption, config);
      const wrapper = document.createElement("div");
      wrapper.appendChild(figure);
      wrapper.appendChild(figcaption);
      return wrapper;
    }
    return figure;
  }
  createVideoElement(config) {
    const figure = document.createElement("figure");
    figure.className = `video${config.class ? " " + config.class : ""}`;
    figure.setAttribute("data-grid", "content");
    const video = document.createElement("video");
    video.controls = true;
    if (config.poster) {
      video.poster = config.poster;
    }
    const source = document.createElement("source");
    source.src = config.src || "";
    video.appendChild(source);
    figure.appendChild(video);
    if (config.caption) {
      const figcaption = document.createElement("figcaption");
      figcaption.className = "figcaption";
      figcaption.innerHTML = renderMarkdown(config.caption);
      figure.appendChild(figcaption);
    }
    applyStyles(figure, config);
    return figure;
  }
  createFigureElement(config) {
    this.globalElementCounter++;
    const wrapper = document.createElement("div");
    const spanCall = document.createElement("span");
    spanCall.className = "spanMove figure_call";
    spanCall.id = `fig-${this.globalElementCounter}-call`;
    const link = document.createElement("a");
    link.href = `#fig-${this.globalElementCounter}`;
    link.textContent = `fig. ${this.globalElementCounter}`;
    spanCall.appendChild(document.createTextNode("["));
    spanCall.appendChild(link);
    spanCall.appendChild(document.createTextNode("]"));
    const spanFig = document.createElement("span");
    spanFig.className = `figure figmove${config.class ? " " + config.class : ""}`;
    spanFig.setAttribute("data-src", config.src || "");
    spanFig.setAttribute("data-grid", "image");
    spanFig.id = `fig-${this.globalElementCounter}`;
    const img = document.createElement("img");
    img.src = config.src || "";
    img.alt = cleanAlt(config.caption || "");
    spanFig.appendChild(img);
    if (config.caption) {
      const captionSpan = document.createElement("span");
      captionSpan.className = "figcaption";
      const refSpan = document.createElement("span");
      refSpan.className = "figure_reference";
      refSpan.textContent = `[fig. ${this.globalElementCounter}]`;
      captionSpan.appendChild(refSpan);
      captionSpan.appendChild(document.createTextNode(" "));
      captionSpan.innerHTML += renderMarkdown(config.caption);
      spanFig.appendChild(captionSpan);
    }
    applyStyles(spanFig, config);
    wrapper.appendChild(spanCall);
    wrapper.appendChild(spanFig);
    return wrapper;
  }
  createImageNoteElement(config) {
    const span = document.createElement("span");
    span.className = `imagenote sideNote${config.class ? " " + config.class : ""}`;
    span.setAttribute("data-src", config.src || "");
    span.setAttribute("data-grid", "image");
    const img = document.createElement("img");
    img.src = config.src || "";
    img.alt = cleanAlt(config.caption || "");
    span.appendChild(img);
    if (config.caption) {
      const captionSpan = document.createElement("span");
      captionSpan.className = "caption";
      captionSpan.innerHTML = renderMarkdown(config.caption);
      span.appendChild(captionSpan);
    }
    applyStyles(span, config);
    return span;
  }
  createFullPageElement(config) {
    this.globalElementCounter++;
    const figure = document.createElement("figure");
    figure.setAttribute("data-id", config.id || "");
    figure.setAttribute("data-src", config.src || "");
    figure.setAttribute("data-grid", "image");
    figure.id = `figure-${this.globalElementCounter}`;
    figure.className = `full-page${config.class ? " " + config.class : ""}`;
    const img = document.createElement("img");
    img.src = config.src || "";
    img.alt = cleanAlt(config.caption || "");
    figure.appendChild(img);
    applyStyles(figure, config);
    return figure;
  }
};

// src/utils/shortcode-processor.ts
var ShortcodeProcessor = class {
  constructor(app) {
    this.app = app;
    this.renderer = new ShortcodeRenderer(app);
  }
  // Pour les code blocks (Live Preview)
  processCodeBlock(source, el, ctx) {
    const container = el.parentElement;
    let type = "";
    if (container && container.className) {
      const match = container.className.match(/block-language-(\w+)/);
      if (match) {
        type = match[1];
      }
    }
    if (type && type !== "shortcode") {
      let src = "";
      let options = {};
      if (source.trim()) {
        try {
          const parsed = parseShortcodeParams(source.trim());
          src = parsed.src || "";
          options = parsed.options;
        } catch (e) {
          src = source.trim().replace(/['"]/g, "");
        }
      }
      const htmlElement = this.renderer.render(type, { src, options });
      if (htmlElement) {
        el.appendChild(htmlElement);
      }
      return;
    }
    const shortcodeMatch = source.match(/\{%\s*(\w+)\s+([^%]+)\s*%\}/);
    if (!shortcodeMatch) {
      console.warn("Format shortcode invalide dans code block");
      return;
    }
    const [, shortcodeType, params] = shortcodeMatch;
    try {
      const parsedParams = parseShortcodeParams(params);
      const htmlElement = this.renderer.render(shortcodeType, parsedParams);
      if (htmlElement) {
        el.appendChild(htmlElement);
      }
    } catch (error) {
      console.error("Erreur parsing shortcode:", error);
    }
  }
  processElement(element, context) {
    console.log("Processing element:", element);
    this.processNodeRecursively(element);
  }
  processNodeRecursively(node) {
    if (node.nodeType === Node.TEXT_NODE) {
      const textNode = node;
      if (textNode.textContent && this.containsShortcode(textNode.textContent)) {
        this.processTextNode(textNode);
        return;
      }
    }
    const children = Array.from(node.childNodes);
    children.forEach((child) => this.processNodeRecursively(child));
  }
  containsShortcode(text) {
    const hasShortcode = /\{%.*%\}/.test(text);
    if (hasShortcode) {
      console.log("Found shortcode in text:", text);
    }
    return hasShortcode;
  }
  processTextNode(textNode) {
    const text = textNode.textContent || "";
    const fragments = [];
    let lastIndex = 0;
    SHORTCODE_REGEX.lastIndex = 0;
    let match;
    while ((match = SHORTCODE_REGEX.exec(text)) !== null) {
      if (match.index > lastIndex) {
        fragments.push(text.slice(lastIndex, match.index));
      }
      const [fullMatch, type, params] = match;
      const htmlElement = this.parseAndRender(type, params);
      if (htmlElement) {
        fragments.push(htmlElement);
      } else {
        fragments.push(fullMatch);
      }
      lastIndex = match.index + fullMatch.length;
    }
    if (lastIndex < text.length) {
      fragments.push(text.slice(lastIndex));
    }
    if (fragments.length > 1 || fragments.length === 1 && typeof fragments[0] !== "string") {
      const parentNode = textNode.parentNode;
      if (parentNode) {
        fragments.forEach((fragment) => {
          if (typeof fragment === "string") {
            if (fragment.trim()) {
              parentNode.insertBefore(document.createTextNode(fragment), textNode);
            }
          } else {
            parentNode.insertBefore(fragment, textNode);
          }
        });
        parentNode.removeChild(textNode);
      }
    }
  }
  parseAndRender(type, params) {
    try {
      const parsedParams = parseShortcodeParams(params);
      return this.renderer.render(type, parsedParams);
    } catch (error) {
      console.error("Erreur parsing shortcode:", error);
      return null;
    }
  }
};

// src/main.ts
var Obsidian11tyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.processor = new ShortcodeProcessor(this.app);
    this.registerMarkdownCodeBlockProcessor("image", this.processor.processCodeBlock.bind(this.processor));
    this.registerMarkdownCodeBlockProcessor("grid", this.processor.processCodeBlock.bind(this.processor));
    this.registerMarkdownCodeBlockProcessor("video", this.processor.processCodeBlock.bind(this.processor));
    this.registerMarkdownCodeBlockProcessor("figure", this.processor.processCodeBlock.bind(this.processor));
    this.registerMarkdownCodeBlockProcessor("imagenote", this.processor.processCodeBlock.bind(this.processor));
    this.registerMarkdownCodeBlockProcessor("fullpage", this.processor.processCodeBlock.bind(this.processor));
    this.registerMarkdownCodeBlockProcessor("shortcode", this.processor.processCodeBlock.bind(this.processor));
    this.registerMarkdownPostProcessor((element, context) => {
      this.processor.processElement(element, context);
    });
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,
