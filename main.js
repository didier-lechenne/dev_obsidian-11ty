/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => Obsidian11tyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// src/utils/constants.ts
var CSS_VAR_MAPPING = {
  col: "--col",
  printCol: "--print-col",
  width: "--width",
  printWidth: "--print-width",
  printRow: "--print-row",
  printHeight: "--print-height",
  alignSelf: "--align-self",
  alignself: "--align-self",
  "align-self": "--align-self",
  imgX: "--img-x",
  imgY: "--img-y",
  imgW: "--img-w",
  page: "--pagedjs-full-page"
};
var SHORTCODE_REGEX = /\{%\s*(\w+)\s+([^%]+)\s*%\}/g;
var SUPPORTED_SHORTCODE_TYPES = [
  "image",
  "grid",
  "video",
  "figure",
  "imagenote",
  "fullpage"
];
var MEDIA_TEMPLATES = {
  image: {
    template: '<figure id="{id}" data-type="{type}" data-grid="image" class="figure {type} {classes}" data-src="{src}"{styles}>{media}<figcaption class="figcaption">{caption}</figcaption></figure>'
  },
  imagenote: {
    template: '<span id="{id}" data-type="{type}" class="{type} {classes}" data-src="{src}"{styles}>{media}<span class="figcaption">{caption}</span></span>'
  },
  figure: {
    template: '<figure id="{id}" data-src="{src}" data-type="{type}" data-grid="image" class="{type} {classes}"{styles}>{media}<figcaption class="figcaption">{caption}</figcaption></figure>'
  },
  grid: {
    template: '<figure id="{id}" data-src="{src}" data-type="{type}" data-grid="image" class="figure {type} {classes}"{styles}>{media}</figure><figcaption class="figcaption"{styles}>{caption}</figcaption>'
  },
  fullpage: {
    template: '<figure id="{id}" data-src="{src}" data-type="{type}" data-grid="image" class="full-page figure {type} {classes}"{styles}>{media}</figure>'
  },
  video: {
    template: '<figure id="{id}" data-type="{type}" data-grid="content" class="video {classes}"{styles}>{media}<figcaption class="figcaption">{caption}</figcaption></figure>'
  }
};

// src/utils/helpers.ts
function generateStyles(config) {
  const styles = {};
  Object.entries(config).forEach(([key, value]) => {
    if (CSS_VAR_MAPPING[key] && value !== void 0 && value !== null && value !== "") {
      const cleanValue = typeof value === "string" ? value.replace(/^["']|["']$/g, "") : value;
      styles[CSS_VAR_MAPPING[key]] = cleanValue;
    }
  });
  return styles;
}
function cleanAlt(caption) {
  if (!caption) return "";
  return caption.replace(/\*([^*]+)\*/g, "$1").replace(/<[^>]+>/g, " ").replace(/&[^;]+;/g, " ").replace(/\s+/g, " ").trim();
}
function renderMarkdown(text) {
  return text.replace(/~~(.*?)~~/g, "<del>$1</del>").replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>").replace(/\*(.*?)\*/g, "<em>$1</em>").replace(/`(.*?)`/g, "<code>$1</code>").replace(/<br>/g, "<br>");
}
function parseShortcodeParams(params) {
  params = params.replace(/\s+/g, " ").trim();
  const match = params.match(/^["']([^"']+)["'](?:\s*,\s*(\{.*\}))?$/) || params.match(/^([^,\s]+)(?:\s*,\s*(\{.*\}))?$/);
  if (!match) {
    const commaIndex = params.indexOf(",");
    if (commaIndex > 0) {
      const src2 = params.substring(0, commaIndex).trim().replace(/^["']|["']$/g, "");
      const optionsStr = params.substring(commaIndex + 1).trim();
      let options2 = {};
      if (optionsStr.startsWith("{")) {
        try {
          const cleanOptions = optionsStr.replace(/,(\s*[}\]])/g, "$1");
          options2 = Function(`"use strict"; return (${cleanOptions})`)();
        } catch (e) {
          console.warn("Erreur parsing options:", e);
        }
      }
      return { src: src2, options: options2 };
    }
    throw new Error("Format de param\xE8tres invalide");
  }
  const src = match[1];
  let options = {};
  if (match[2]) {
    try {
      const cleanOptions = match[2].replace(/,(\s*[}\]])/g, "$1");
      options = Function(`"use strict"; return (${cleanOptions})`)();
    } catch (e) {
      console.warn("Erreur parsing options:", e);
      options = {};
    }
  }
  return { src, options };
}

// src/utils/shortcode-renderer.ts
var ShortcodeRenderer = class {
  constructor(app) {
    this.app = app;
    this.globalElementCounter = 0;
  }
  render(type, params) {
    if (!SUPPORTED_SHORTCODE_TYPES.includes(type)) {
      console.warn(`Type de shortcode non support\xE9: ${type}`);
      return null;
    }
    const { src, options = {} } = params;
    const config = { src: this.resolveImagePath(src), ...options };
    this.globalElementCounter++;
    const template = MEDIA_TEMPLATES[type];
    if (!template) return null;
    const templateData = {
      id: config.id || `${type}-${this.globalElementCounter}`,
      type,
      classes: config.class || "",
      src: config.src || "",
      media: this.createMediaElement(type, config),
      caption: config.caption ? renderMarkdown(config.caption) : "",
      styles: this.generateStylesString(config)
    };
    const htmlString = this.renderTemplate(template.template, templateData);
    const tempDiv = document.createElement("div");
    tempDiv.innerHTML = htmlString;
    const element = tempDiv.firstElementChild;
    if (element) {
      this.addEditOnClick(element);
      if (type === "grid" && tempDiv.children.length > 1) {
        const wrapper = document.createElement("div");
        Array.from(tempDiv.children).forEach((child) => wrapper.appendChild(child));
        return wrapper;
      }
    }
    return element;
  }
  resolveImagePath(src) {
    if (!src) return "";
    if (src.startsWith("http") || src.startsWith("app://")) {
      return src;
    }
    const file = this.app.metadataCache.getFirstLinkpathDest(src, "");
    if (file) {
      return this.app.vault.getResourcePath(file);
    }
    return `app://local/${encodeURIComponent(src)}`;
  }
  renderTemplate(template, data) {
    return template.replace(/{id}/g, data.id).replace(/{type}/g, data.type).replace(/{classes}/g, data.classes).replace(/{src}/g, data.src).replace(/{media}/g, data.media).replace(/{caption}/g, data.caption).replace(/{styles}/g, data.styles);
  }
  createMediaElement(type, config) {
    if (type === "video") {
      const posterAttr = config.poster ? ` poster="${config.poster}"` : "";
      return `<video controls${posterAttr}><source src="${config.src}"></video>`;
    }
    return `<img src="${config.src}" alt="${cleanAlt(config.caption || "")}">`;
  }
  generateStylesString(config) {
    const styles = generateStyles(config);
    const styleArray = Object.entries(styles).map(([prop, value]) => `${prop}: ${value}`);
    return styleArray.length > 0 ? ` style="${styleArray.join("; ")}"` : "";
  }
  addEditOnClick(element) {
    element.style.cursor = "pointer";
    element.addEventListener("click", (event) => {
      event.preventDefault();
      event.stopPropagation();
      const editButton = this.findEditButton(element);
      if (editButton) {
        editButton.click();
      }
    });
  }
  findEditButton(element) {
    let parent = element.parentElement;
    while (parent) {
      const editButton = parent.querySelector(".edit-block-button");
      if (editButton) return editButton;
      parent = parent.parentElement;
    }
    return null;
  }
};

// src/utils/shortcode-processor.ts
var ShortcodeProcessor = class {
  constructor(app) {
    this.app = app;
    this.renderer = new ShortcodeRenderer(app);
  }
  // Pour les code blocks (Live Preview)
  processCodeBlock(source, el, ctx) {
    const container = el.parentElement;
    let type = "";
    if (container && container.className) {
      const match = container.className.match(/block-language-(\w+)/);
      if (match) {
        type = match[1];
      }
    }
    if (type && type !== "shortcode") {
      let src = "";
      let options = {};
      if (source.trim()) {
        try {
          const parsed = parseShortcodeParams(source.trim());
          src = parsed.src || "";
          options = parsed.options;
        } catch (e) {
          src = source.trim().replace(/['"]/g, "");
        }
      }
      const htmlElement = this.renderer.render(type, { src, options });
      if (htmlElement) {
        el.appendChild(htmlElement);
      }
      return;
    }
    const shortcodeMatch = source.match(/\{%\s*(\w+)\s+([^%]+)\s*%\}/);
    if (!shortcodeMatch) {
      console.warn("Format shortcode invalide dans code block");
      return;
    }
    const [, shortcodeType, params] = shortcodeMatch;
    try {
      const parsedParams = parseShortcodeParams(params);
      const htmlElement = this.renderer.render(shortcodeType, parsedParams);
      if (htmlElement) {
        el.appendChild(htmlElement);
      }
    } catch (error) {
      console.error("Erreur parsing shortcode:", error);
    }
  }
  processElement(element, context) {
    console.log("Processing element:", element);
    this.processNodeRecursively(element);
  }
  processNodeRecursively(node) {
    if (node.nodeType === Node.TEXT_NODE) {
      const textNode = node;
      if (textNode.textContent && this.containsShortcode(textNode.textContent)) {
        this.processTextNode(textNode);
        return;
      }
    }
    const children = Array.from(node.childNodes);
    children.forEach((child) => this.processNodeRecursively(child));
  }
  containsShortcode(text) {
    const hasShortcode = /\{%.*%\}/.test(text);
    if (hasShortcode) {
      console.log("Found shortcode in text:", text);
    }
    return hasShortcode;
  }
  processTextNode(textNode) {
    const text = textNode.textContent || "";
    const fragments = [];
    let lastIndex = 0;
    SHORTCODE_REGEX.lastIndex = 0;
    let match;
    while ((match = SHORTCODE_REGEX.exec(text)) !== null) {
      if (match.index > lastIndex) {
        fragments.push(text.slice(lastIndex, match.index));
      }
      const [fullMatch, type, params] = match;
      const htmlElement = this.parseAndRender(type, params);
      if (htmlElement) {
        fragments.push(htmlElement);
      } else {
        fragments.push(fullMatch);
      }
      lastIndex = match.index + fullMatch.length;
    }
    if (lastIndex < text.length) {
      fragments.push(text.slice(lastIndex));
    }
    if (fragments.length > 1 || fragments.length === 1 && typeof fragments[0] !== "string") {
      const parentNode = textNode.parentNode;
      if (parentNode) {
        fragments.forEach((fragment) => {
          if (typeof fragment === "string") {
            if (fragment.trim()) {
              parentNode.insertBefore(document.createTextNode(fragment), textNode);
            }
          } else {
            parentNode.insertBefore(fragment, textNode);
          }
        });
        parentNode.removeChild(textNode);
      }
    }
  }
  parseAndRender(type, params) {
    try {
      const parsedParams = parseShortcodeParams(params);
      return this.renderer.render(type, parsedParams);
    } catch (error) {
      console.error("Erreur parsing shortcode:", error);
      return null;
    }
  }
};

// src/main.ts
var Obsidian11tyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.processor = new ShortcodeProcessor(this.app);
    this.registerMarkdownCodeBlockProcessor("image", this.processor.processCodeBlock.bind(this.processor));
    this.registerMarkdownCodeBlockProcessor("grid", this.processor.processCodeBlock.bind(this.processor));
    this.registerMarkdownCodeBlockProcessor("video", this.processor.processCodeBlock.bind(this.processor));
    this.registerMarkdownCodeBlockProcessor("figure", this.processor.processCodeBlock.bind(this.processor));
    this.registerMarkdownCodeBlockProcessor("imagenote", this.processor.processCodeBlock.bind(this.processor));
    this.registerMarkdownCodeBlockProcessor("fullpage", this.processor.processCodeBlock.bind(this.processor));
    this.registerMarkdownCodeBlockProcessor("11ty", this.processor.processCodeBlock.bind(this.processor));
    this.registerMarkdownPostProcessor((element, context) => {
      this.processor.processElement(element, context);
    });
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,
